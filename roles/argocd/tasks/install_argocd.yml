---
- name: Add Argo CD Helm repository
  kubernetes.core.helm_repository:
    name: argo
    repo_url: https://argoproj.github.io/argo-helm

- name: Install Argo CD via Helm
  kubernetes.core.helm:
    name: argocd
    chart_ref: argo/argo-cd
    release_namespace: argocd
    create_namespace: true
    state: present
    wait: true
    wait_timeout: "{{ helm_install_timeout }}"
    values:
      imageUpdater:
        enabled: true
      configs:
        repositories:
          harbor:
            type: helm
            enableOCI: "true"
            name: "{{ harbor_hostname }}"
            url: "https://{{ harbor_hostname }}"
            username: "{{ harbor_admin_username }}"
            password: "{{ harbor_admin_password }}"
        params:
          server.insecure: true
        secret:
          argocdServerAdminPassword: "{{ argocd_admin_password | password_hash('bcrypt') }}"
          items:
            token: "{{ github_pat }}"
      notifications:
        argocdUrl: http://localhost:8082
        notifiers:
          service.webhook.github-status: "{{ lookup('template', 'service_webhook_github_status.yaml.j2') }}"
        templates:
          template.github-status: "{{ lookup('template', 'app_github_status.yaml.j2') }}"
        triggers:
          trigger.on-deployed: "{{ lookup('template', 'triggers/on-deployed.yaml.j2') }}"
          trigger.on-health-degraded: "{{ lookup('template', 'triggers/on-health-degraded.yaml.j2') }}"
          trigger.on-sync-failed: "{{ lookup('template', 'triggers/on-sync-failed.yaml.j2') }}"
          trigger.on-sync-running: "{{ lookup('template', 'triggers/on-sync-running.yaml.j2') }}"
          trigger.on-sync-status-unknown: "{{ lookup('template', 'triggers/on-sync-status-unknown.yaml.j2') }}"
          trigger.on-unknown-sync-status: "{{ lookup('template', 'triggers/on-unknown-sync-status.yaml.j2') }}"
          trigger.on-sync-succeeded: "{{ lookup('template', 'triggers/on-sync-succeeded.yaml.j2') }}"

- name: Get Harbor TLS secret from Kubernetes (for Image Updater CA)
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    namespace: "{{ harbor_namespace }}"
    name: "{{ harbor_tls_secret_name }}"
  register: harbor_tls_secret
  delegate_to: localhost
  become: false

- name: Create Secret for Harbor Image Updater credentials
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: argocd-image-updater-harbor-credentials
        namespace: argocd
      stringData:
        username: "{{ harbor_admin_username }}"
        password: "{{ harbor_admin_password }}"

- name: Create secret with Harbor CA certificate
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: harbor-ca-cert
        namespace: argocd
      data:
        ca.crt: "{{ harbor_tls_secret.resources[0].data['ca.crt'] }}"

- name: Install Argo CD Image Updater via Helm
  kubernetes.core.helm:
    name: argocd-image-updater
    chart_ref: argo/argocd-image-updater
    release_namespace: argocd
    create_namespace: true
    state: present
    values:
      config:
        argocd:
          serverAddress: argocd-server.argocd.svc.cluster.local:80
          plaintext: true
          insecure: true
        registries:
          - name: harbor
            api_url: "https://{{ harbor_hostname }}"
            prefix: "{{ harbor_hostname }}/"
            credentials: "secret:argocd-image-updater-harbor-credentials#username:password"
      replicaCount: 1
      volumeMounts:
        - name: custom-ca
          mountPath: /etc/ssl/certs/harbor-ca.crt
          subPath: ca.crt
          readOnly: true
      volumes:
        - name: custom-ca
          secret:
            secretName: harbor-ca-cert
      extraEnv:
        - name: SSL_CERT_FILE
          value: /etc/ssl/certs/harbor-ca.crt
