- name: Create Harbor namespace
  shell: kubectl create namespace {{ harbor_namespace }} --dry-run=client -o yaml | kubectl apply -f -
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: Install Harbor via Helm with Ingress and Letâ€™s Encrypt
  shell: |
    helm upgrade --install harbor harbor/harbor \
      --namespace {{ harbor_namespace }} \
      --create-namespace \
      --version {{ harbor_version }} \
      --set expose.type=ingress \
      --set expose.ingress.hosts.core={{ harbor_domain }} \
      --set expose.tls.enabled=true \
      --set expose.tls.certSource={{ harbor_tls_cert_source }} \
      {% if harbor_tls_cert_source == 'secret' %}--set expose.tls.secret.secretName={{ harbor_tls_secret_name }} {% endif %}\
      --set externalURL="{{ harbor_external_url }}" \
      --set harborAdminPassword="{{ harbor_admin_password }}" \
      --set persistence.enabled=true \
      --set persistence.storageClass={{ harbor_storage_class }} \
      --set persistence.persistentVolumeClaim.registry.size={{ harbor_registry_size }}
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  args:
    creates: /tmp/harbor-installed

- name: Wait for Harbor core pod to be ready and show logs on failure
  block:
    - name: Wait for Harbor core pod to be ready
      shell: |
        kubectl -n {{ harbor_namespace }} wait --for=condition=Ready pod -l app=harbor,component=core --timeout=300s
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: harbor_core_wait
      failed_when: harbor_core_wait.rc != 0
  rescue:
    - name: Output Harbor core pod status
      shell: |
        kubectl -n {{ harbor_namespace }} get pods -l app=harbor,component=core -o wide
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: harbor_core_pods_status
      ignore_errors: true

    - name: Output Harbor core pod logs
      shell: |
        for pod in $(kubectl -n {{ harbor_namespace }} get pods -l app=harbor,component=core -o jsonpath='{.items[*].metadata.name}'); do
          echo "==== $pod ====";
          kubectl -n {{ harbor_namespace }} logs $pod || true;
        done
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: harbor_core_pod_logs
      ignore_errors: true

    - name: Show Harbor core pod status
      debug:
        var: harbor_core_pods_status.stdout

    - name: Show Harbor core pod logs
      debug:
        var: harbor_core_pod_logs.stdout

    - name: Fail the play if Harbor core pod is not ready
      fail:
        msg: "Harbor core pod failed to become ready. See previous output for pod status and logs."

- name: Create Certificate for Harbor
  shell: |
    kubectl apply -f - <<EOF
    apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      name: harbor-tls
      namespace: {{ harbor_namespace }}
    spec:
      secretName: harbor-tls
      issuerRef:
        name: letsencrypt-prod
        kind: ClusterIssuer
      commonName: {{ harbor_domain }}
      dnsNames:
      - {{ harbor_domain }}
    EOF
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
