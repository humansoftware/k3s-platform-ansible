- name: Create Harbor namespace
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: "{{ harbor_namespace }}"
    state: present

# Certificates for Harbor - requires cert-manager to be installed
- name: Create self-signed ClusterIssuer for internal domains
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
      metadata:
        name: harbor-selfsigned
      spec:
        selfSigned: {}

- name: Create Certificate for harbor.local using self-signed issuer
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: "{{ harbor_secret_name }}"
        namespace: "{{ harbor_namespace }}"
      spec:
        secretName: "{{ harbor_tls_secret_name }}"
        dnsNames:
          - "{{ harbor_domain }}"
        issuerRef:
          name: harbor-selfsigned
          kind: ClusterIssuer

# Actual Harbor installation
- name: Add Harbor Helm repository
  kubernetes.core.helm_repository:
    name: harbor
    repo_url: https://helm.goharbor.io

- name: Install Harbor via Helm
  kubernetes.core.helm:
    name: harbor
    chart_ref: harbor/harbor
    release_namespace: "{{ harbor_namespace }}"
    create_namespace: true
    chart_version: "{{ harbor_version }}"
    values:
      expose:
        type: ingress
        ingress:
          hosts:
            core: "{{ harbor_domain }}"
        tls:
          enabled: true
          certSource: "{{ harbor_tls_cert_source }}"
          secret:
            secretName: "{{ harbor_tls_secret_name }}"
      externalURL: "{{ harbor_external_url }}"
      harborAdminPassword: "{{ harbor_admin_password }}"
      persistence:
        enabled: true
        storageClass: "{{ harbor_storage_class }}"
        persistentVolumeClaim:
          registry:
            size: "{{ harbor_registry_size }}"
    wait: true
    wait_timeout: 5m

- name: Ensure localhost rule exists in Harbor Ingress
  kubernetes.core.k8s_json_patch:
    api_version: networking.k8s.io/v1
    kind: Ingress
    name: harbor-ingress
    namespace: "{{ harbor_namespace }}"
    patch:
      - op: add
        path: /spec/rules/-
        value:
          host: localhost
          http:
            paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: harbor-portal
                    port:
                      number: 80
  failed_when:
    - result is failed
    - "'already exists' not in (result.stderr | default(''))"
  register: result

- name: Patch Harbor Ingress to add full localhost rules
  kubernetes.core.k8s_json_patch:
    api_version: networking.k8s.io/v1
    kind: Ingress
    name: harbor-ingress
    namespace: "{{ harbor_namespace }}"
    patch:
      - op: replace
        path: /spec/rules/1/http/paths
        value:
          - path: /api/
            pathType: Prefix
            backend:
              service:
                name: harbor-core
                port:
                  number: 80
          - path: /service/
            pathType: Prefix
            backend:
              service:
                name: harbor-core
                port:
                  number: 80
          - path: /v2/
            pathType: Prefix
            backend:
              service:
                name: harbor-core
                port:
                  number: 80
          - path: /c/
            pathType: Prefix
            backend:
              service:
                name: harbor-core
                port:
                  number: 80
          - path: /
            pathType: Prefix
            backend:
              service:
                name: harbor-portal
                port:
                  number: 80

- name: Get Traefik service ClusterIP
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Service
    namespace: kube-system
    name: traefik
  register: traefik_svc

- name: Get current CoreDNS ConfigMap
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ConfigMap
    namespace: kube-system
    name: coredns
  register: coredns_cm

- name: Add harbor.local to CoreDNS NodeHosts (idempotent)
  ansible.builtin.set_fact:
    new_nodehosts: |
      {% set traefik_ip = traefik_svc.resources[0].spec.clusterIP %}
      {% set nodehosts = coredns_cm.resources[0].data.get('NodeHosts', '') %}
      {% if 'harbor.local' in nodehosts %}
      {{ nodehosts }}
      {% else %}
      {{ nodehosts }}
      {{ traefik_ip }} harbor.local
      {% endif %}

- name: Patch CoreDNS ConfigMap NodeHosts to resolve harbor.local (idempotent)
  kubernetes.core.k8s:
    state: present
    kind: ConfigMap
    api_version: v1
    name: coredns
    namespace: kube-system
    definition:
      data:
        NodeHosts: "{{ new_nodehosts }}"

- name: Restart CoreDNS pods to apply DNS changes
  kubernetes.core.k8s:
    api_version: v1
    kind: Pod
    namespace: kube-system
    label_selectors:
      - k8s-app=kube-dns
    state: absent

- name: Create Harbor project via Kubernetes Job (in-cluster)
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: batch/v1
      kind: Job
      metadata:
        name: create-harbor-project-{{ item.name | lower | regex_replace('[^a-z0-9-]', '-') }}
        namespace: "{{ harbor_namespace }}"
      spec:
        backoffLimit: 1
        template:
          spec:
            restartPolicy: Never
            containers:
              - name: curl
                image: curlimages/curl:8.7.1
                command:
                  - sh
                  - -c
                  - |
                    curl -k -u admin:${HARBOR_ADMIN_PASSWORD} -X POST "https://{{ harbor_domain }}/api/v2.0/projects" \
                      -H "Content-Type: application/json" \
                      -d '{"project_name": "{{ item.name }}", "public": true}' \
                      -w "\nHTTP_STATUS:%{http_code}\n" | tee /tmp/output.txt
                env:
                  - name: HARBOR_ADMIN_PASSWORD
                    value: "{{ harbor_admin_password }}"
  loop: "{{ self_saas_projects }}"

- name: Delete Harbor project creation Jobs
  kubernetes.core.k8s:
    state: absent
    api_version: batch/v1
    kind: Job
    name: "create-harbor-project-{{ item.name | lower | regex_replace('[^a-z0-9-]', '-') }}"
    namespace: "{{ harbor_namespace }}"
  loop: "{{ self_saas_projects }}"
