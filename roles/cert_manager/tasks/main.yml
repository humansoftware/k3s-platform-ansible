- name: Install cert-manager CRDs
  shell: kubectl apply -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.crds.yaml
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: Add ingress-nginx Helm repo
  shell: helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
  args:
    creates: /root/.cache/helm/repository/ingress-nginx-index.yaml
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: Update Helm repos
  shell: helm repo update
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: Add cert-manager Helm repo
  shell: helm repo add jetstack https://charts.jetstack.io
  args:
    creates: /root/.cache/helm/repository/jetstack-index.yaml

- name: Update Helm repos
  shell: helm repo update

- name: Install cert-manager
  shell: |
    helm upgrade --install cert-manager jetstack/cert-manager \
      --namespace cert-manager --create-namespace \
      --version v1.14.4
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: Create Letâ€™s Encrypt ClusterIssuer
  shell: |
    kubectl apply -f - <<EOF
    apiVersion: cert-manager.io/v1
    kind: ClusterIssuer
    metadata:
      name: letsencrypt-prod
    spec:
      acme:
        server: https://acme-v02.api.letsencrypt.org/directory
        email: {{cert_manager_email}}
        privateKeySecretRef:
          name: letsencrypt-prod
        solvers:
        - http01:
            ingress:
              class: nginx
    EOF
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: Install NGINX Ingress Controller
  shell: |
    helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
      --namespace ingress-nginx --create-namespace
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: Wait for ingress-nginx-controller-admission service endpoints
  shell: |
    kubectl -n ingress-nginx get endpoints ingress-nginx-controller-admission -o jsonpath='{.subsets}' | grep -q 'addresses'
  register: ingress_admission_ready
  retries: 20
  delay: 10
  until: ingress_admission_ready.rc == 0
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
