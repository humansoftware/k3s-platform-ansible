# This ansible will set up a K3s cluster with server and agent nodes,
# ensuring prerequisites are met and configurations are applied.
# As output, a fact `k3s_kubeconfig_path` will be set to the local kubeconfig file path.
# You must ensure the required secrets are set before running this playbook.
- name: Fail if K3S_TOKEN is not set
  ansible.builtin.fail:
    msg: "The environment variable K3S_TOKEN must be set before running this playbook."
  when: k3s_token is not defined or k3s_token == ""

- name: Fail if K3S_LOCAL_KUBECONFIG is not set
  ansible.builtin.fail:
    msg: "The environment variable K3S_LOCAL_KUBECONFIG must be set before running this playbook."
  when: k3s_local_kubeconfig is not defined or k3s_local_kubeconfig == ""

- name: Set the needed secrets facts for all hosts
  ansible.builtin.set_fact:
    token: "{{ k3s_token }}"

# Common prerequisites for all k3s_cluster hosts
- name: Run prereq role on all k3s_cluster hosts
  ansible.builtin.include_role:
    name: k3s.orchestration.prereq
  when: "'k3s_cluster' in group_names"

# Setup server nodes
- name: Setup K3s Server
  ansible.builtin.include_role:
    name: k3s.orchestration.k3s_server
  when: "'server' in group_names"

# Copy kubeconfig to local machine and set kubeconfig path fact
- name: Fetch kubeconfig to control node
  ansible.builtin.fetch:
    src: /etc/rancher/k3s/k3s.yaml
    dest: "{{ k3s_local_kubeconfig }}"
    flat: true
  when: "'server' in group_names"

- name: Set kubeconfig path fact
  ansible.builtin.set_fact:
    k3s_kubeconfig_path: "{{ k3s_local_kubeconfig }}"
  when: "'server' in group_names"

# Setup agent nodes
- name: Ensure k3s-agent.service.env exists
  ansible.builtin.file:
    path: "{{ systemd_dir }}/k3s-agent.service.env"
    state: touch
    owner: root
    group: root
    mode: "0644"
  vars:
    systemd_dir: "/etc/systemd/system"
  when: "'agent' in group_names"

- name: Setup K3s Agent
  ansible.builtin.include_role:
    name: k3s.orchestration.k3s_agent
  when: "'agent' in group_names"

# --- SSH Tunnel Automation on Control Node ---
- name: Ensure ~/.ssh directory exists
  ansible.builtin.file:
    path: "~/.ssh"
    state: directory
    mode: '0700'
  delegate_to: localhost
  run_once: true
  become: false

- name: Create SSH tunnel config file
  ansible.builtin.template:
    src: "k3s_tunnel_config.j2"
    dest: "~/.ssh/k3s_tunnel_config"
    mode: '0600'
  delegate_to: localhost
  run_once: true
  become: false
  vars:
    k3s_server_ip: "{{ host_public_ip }}"
    k3s_ssh_port: "{{ ssh_port_rewritten | default(2222) }}"

- name: Ensure ~/.config/systemd/user directory exists
  ansible.builtin.file:
    path: "~/.config/systemd/user"
    state: directory
    mode: '0700'
  delegate_to: localhost
  run_once: true
  become: false

- name: Create k3s-tunnel systemd user service
  ansible.builtin.template:
    src: "k3s-tunnel.service.j2"
    dest: "~/.config/systemd/user/k3s-tunnel.service"
    mode: '0644'
  delegate_to: localhost
  run_once: true
  become: false

- name: Reload systemd user daemon
  ansible.builtin.systemd_service:
    daemon_reload: true
    scope: user
  delegate_to: localhost
  run_once: true
  become: false
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ ansible_uid | default(1000) }}"

- name: Enable and start k3s-tunnel systemd user service
  ansible.builtin.systemd:
    name: k3s-tunnel
    enabled: true
    state: started
    scope: user
  delegate_to: localhost
  run_once: true
  become: false
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ ansible_uid | default(1000) }}"

- name: Enable lingering for user
  ansible.builtin.command: loginctl enable-linger {{ ansible_user_id }}
  delegate_to: localhost
  run_once: true
  become: false
  changed_when: false
  failed_when: enable_linger_result.rc not in [0,1]
  register: enable_linger_result
