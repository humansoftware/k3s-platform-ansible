---
# tasks file for create_projects_secrets
- name: Ensure project namespace exists
  kubernetes.core.k8s:
    state: present
    api_version: v1
    kind: Namespace
    name: "{{ item.name }}"
  loop: "{{ self_saas_projects }}"
  loop_control:
    label: "{{ item.name }}"

- name: Try to get Elasticsearch CA certificate
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: elasticsearch-master-certs
    namespace: "{{ elasticsearch_namespace | default('elasticsearch') }}"
  register: elasticsearch_ca_secret
  changed_when: false
  when: install_elasticsearch | default(false)

- name: Set CA certificate fact
  ansible.builtin.set_fact:
    elasticsearch_ca_crt: "{{ elasticsearch_ca_secret.resources[0].data['ca.crt'] | b64decode }}"
  when: install_elasticsearch | default(false)

- name: Render secret data for each project using template
  ansible.builtin.set_fact:
    project_secret_data: "{{ lookup('template', 'roles/create_projects_secrets/templates/project_secret.yaml.j2') | from_yaml }}"
  loop: "{{ self_saas_projects }}"
  loop_control:
    label: "{{ item.name }}"
  register: secret_data_results

- name: Build zipped list of projects and secret data
  ansible.builtin.set_fact:
    projects_with_secrets: "{{ projects_with_secrets | default([]) + [ [item.0, item.1] ] }}"
  with_together:
    - "{{ self_saas_projects }}"
    - "{{ secret_data_results.results }}"

- name: Create project secrets for each self-hosted SaaS project
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ item.0.name }}-secrets"
        namespace: "{{ item.0.name }}"
      type: Opaque
      stringData: "{{ item.1.ansible_facts.project_secret_data | from_yaml }}"
  loop: "{{ projects_with_secrets }}"
  loop_control:
    label: "{{ item.0.name }}"
