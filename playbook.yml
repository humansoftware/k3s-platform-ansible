---
- name: Install k3s, Longhorn, and a container registry
  hosts: all
  become: yes
  vars:
    k3s_version: v1.29.4+k3s1
    longhorn_namespace: longhorn-system
    registry_namespace: registry
    registry_port: 5000

  tasks:
    - name: Install required packages
      apt:
        name:
          - curl
          - apt-transport-https
          - ca-certificates
          - software-properties-common
        state: present
        update_cache: yes

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
        validate_certs: no
    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable
        state: present
        update_cache: yes
    - name: Install Docker
      apt:
        name: docker-ce
        state: present
        update_cache: yes
    - name: Start and enable Docker
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Install k3s (latest stable)
      shell: |
        curl -sfL https://get.k3s.io | sh -s - --docker
      args:
        creates: /usr/local/bin/k3s

    - name: Wait for k3s service to be active
      systemd:
        name: k3s
        state: started
        enabled: yes

    - name: Get kubeconfig
      slurp:
        src: /etc/rancher/k3s/k3s.yaml
      register: kubeconfig

    - name: Set KUBECONFIG for future tasks
      set_fact:
        kubeconfig_path: /etc/rancher/k3s/k3s.yaml

    - name: Install Longhorn using kubectl
      shell: |
        kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v1.5.3/deploy/longhorn.yaml
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      args:
        creates: /var/lib/rancher/k3s/server/manifests/longhorn.yaml

    - name: Wait for Longhorn pods to be ready
      shell: |
        kubectl -n {{ longhorn_namespace }} wait --for=condition=Ready pod --all --timeout=300s
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Create registry namespace
      shell: |
        kubectl create namespace {{ registry_namespace }} --dry-run=client -o yaml | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Deploy container registry
      shell: |
        kubectl -n {{ registry_namespace }} apply -f - <<EOF
        apiVersion: v1
        kind: Pod
        metadata:
          name: registry
        spec:
          containers:
          - name: registry
            image: registry:2
            ports:
            - containerPort: 5000
              name: registry
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: registry
        spec:
          selector:
            name: registry
          ports:
          - protocol: TCP
            port: {{ registry_port }}
            targetPort: 5000
        EOF
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
